{"version":3,"file":"js/970.babylonBundle.js","mappings":"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","sources":["webpack://babylonjs-typescript-webpack-simple-scene/./src/noise/cqnoise.ts","webpack://babylonjs-typescript-webpack-simple-scene/./src/iterators/dimensional.ts","webpack://babylonjs-typescript-webpack-simple-scene/./src/structs/point3.ts","webpack://babylonjs-typescript-webpack-simple-scene/./src/iterators/neighbors.ts","webpack://babylonjs-typescript-webpack-simple-scene/./src/voxels/voxels_cube.ts","webpack://babylonjs-typescript-webpack-simple-scene/./src/noise/bump.ts","webpack://babylonjs-typescript-webpack-simple-scene/./src/textures/bump/ridges_texture.ts","webpack://babylonjs-typescript-webpack-simple-scene/./src/scenes/dev/voxelCubeMazeWithBumpMap.ts"],"sourcesContent":["// CqNoise1234\n// Copyright (C) 2003-2012, Stefan Gustavson, John Davis\n//\n// Contact: stegu@itn.liu.se, jdavis@pcprogramming.com\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU General Public\n// License as published by the Free Software Foundation; either\n// version 2 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// General Public License for more details.\n//\n// You should have received a copy of the GNU General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\n/** For the original versions see aqsis repo.  This is simply a port of the\n simplex noise functions in aqsis.\n */\n\n/** \\file\n \\brief Implements the CqNoise1234 class for producing Perlin noise.\n \\author Stefan Gustavson (stegu@itn.liu.se)\n */\n\n/*\n * This implementation is \"Improved Noise\" as presented by\n * Ken Perlin at Siggraph 2002. The 3D function is a direct port\n * of his Java reference code available on www.noisemachine.com\n * (although I cleaned it up and made the code more readable),\n * but the 1D, 2D and 4D cases were implemented from scratch\n * by me.\n *\n * This is a highly reusable class. It has no dependencies\n * on any other file, apart from its own header file.\n */\n\n\n// This is the new and improved, C(2) continuous interpolant\n\nfunction FADE(t: number) {\n    return (t * t * t * (t * (t * 6 - 15) + 10));\n}\n\nfunction FASTFLOOR(x: number) {\n    return (x > 0) ? Math.floor(x) : Math.floor(x - 1);\n}\n\nfunction NLERP(t: number, a: number, b: number) {\n    return (a + t * (b - a));\n}\n\n//---------------------------------------------------------------------\n// Static data\n\n/*\n * Permutation table. This is just a random jumble of all numbers 0-255,\n * repeated twice to avoid wrapping the index at 255 for each lookup.\n * This needs to be exactly the same for all instances on all platforms,\n * so it's easiest to just keep it as static explicit data.\n * This also removes the need for any initialisation of this class.\n *\n * Note that making this an int[] instead of a char[] might make the\n * code run faster on platforms with a high penalty for unaligned single\n * byte addressing. Intel x86 is generally single-byte-friendly, but\n * some other CPUs are faster with 4-aligned reads.\n * However, a char[] is smaller, which avoids cache trashing, and that\n * is probably the most important aspect on most architectures.\n * This array is accessed a *lot* by the noise functions.\n * A vector-valued noise over 3D accesses it 96 times, and a\n * float-valued 4D noise 64 times. We want this to fit in the cache!\n */\nexport class CqNoise {\n    readonly perm = [\n        151, 160, 137, 91, 90, 15,\n        131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23,\n        190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33,\n        88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166,\n        77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244,\n        102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,\n        135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123,\n        5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,\n        223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9,\n        129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228,\n        251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107,\n        49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,\n        138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180,\n        151, 160, 137, 91, 90, 15,\n        131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23,\n        190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33,\n        88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166,\n        77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244,\n        102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,\n        135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123,\n        5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,\n        223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9,\n        129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228,\n        251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107,\n        49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,\n        138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180\n    ];\n\n    //---------------------------------------------------------------------\n\n    /*\n     * Helper functions to compute gradients-dot-residualvectors (1D to 4D)\n     * Note that these generate gradients of more than unit length. To make\n     * a close match with the value range of classic Perlin noise, the final\n     * noise values need to be rescaled. To match the RenderMan noise in a\n     * statistical sense, the approximate scaling values (empirically\n     * determined from test renderings) are:\n     * 1D noise needs rescaling with 0.188\n     * 2D noise needs rescaling with 0.507\n     * 3D noise needs rescaling with 0.936\n     * 4D noise needs rescaling with 0.87\n     * Note that these noise functions are the most practical and useful\n     * signed version of Perlin noise. To return values according to the\n     * RenderMan specification from the SL noise() and pnoise() functions,\n     * the noise values need to be scaled and offset to [0,1], like this:\n     * float SLnoise = (CqNoise1234::noise(x,y,z) + 1.0) * 0.5;\n     */\n\n    grad1(hash: number, x: number) {\n        const h = hash & 15;\n        let grad = 1.0 + (h & 7);  // Gradient value 1.0, 2.0, ..., 8.0\n        if (h & 8)\n            grad = -grad;         // and a random sign for the gradient\n        return (grad * x);           // Multiply the gradient with the distance\n    }\n\n    grad2(hash: number, x: number, y: number) {\n        const h = hash & 7;      // Convert low 3 bits of hash code\n        const u = h < 4 ? x : y;  // into 8 simple gradient directions,\n        const v = h < 4 ? y : x;  // and compute the dot product with (x,y).\n        return ((h & 1) ? -u : u) + ((h & 2) ? -2.0 * v : 2.0 * v);\n    }\n\n    grad3(hash: number, x: number, y: number, z: number) {\n        const h = hash & 15;     // Convert low 4 bits of hash code into 12 simple\n        const u = h < 8 ? x : y; // gradient directions, and compute dot product.\n        const v = h < 4 ? y : h == 12 || h == 14 ? x : z; // Fix repeats at h = 12 to 15\n        return ((h & 1) ? -u : u) + ((h & 2) ? -v : v);\n    }\n\n    grad4(hash: number, x: number, y: number, z: number, t: number) {\n        const h = hash & 31;      // Convert low 5 bits of hash code into 32 simple\n        const u = h < 24 ? x : y; // gradient directions, and compute dot product.\n        const v = h < 16 ? y : z;\n        const w = h < 8 ? z : t;\n        return ((h & 1) ? -u : u) + ((h & 2) ? -v : v) + ((h & 4) ? -w : w);\n    }\n\n    //---------------------------------------------------------------------\n    /** 1D float Perlin noise, SL \"noise()\"\n     */\n    noise1(x: number) {\n        let ix0 = FASTFLOOR(x); // Integer part of x\n        const fx0 = x - ix0;       // Fractional part of x\n        const fx1 = fx0 - 1.0;\n        const ix1 = (ix0 + 1) & 0xff;\n        ix0 = ix0 & 0xff;    // Wrap to 0..255\n\n        const s = FADE(fx0);\n\n        const n0 = this.grad1(this.perm[ix0], fx0);\n        const n1 = this.grad1(this.perm[ix1], fx1);\n        return 0.188 * (NLERP(s, n0, n1));\n    }\n\n    //---------------------------------------------------------------------\n    /** 1D float Perlin periodic noise, SL \"pnoise()\"\n     */\n    pnoise1(x: number, px: number) {\n        let ix0 = FASTFLOOR(x); // Integer part of x\n        const fx0 = x - ix0;       // Fractional part of x\n        const fx1 = fx0 - 1.0;\n        if (px < 1) px = 1;\n        const ix1 = ((ix0 + 1) % px) & 0xff; // Wrap to 0..px-1 *and* wrap to 0..255\n        ix0 = (ix0 % px) & 0xff;      // (because px might be greater than 256)\n\n        const s = FADE(fx0);\n\n        const n0 = this.grad1(this.perm[ix0], fx0);\n        const n1 = this.grad1(this.perm[ix1], fx1);\n        return 0.188 * (NLERP(s, n0, n1));\n    }\n\n\n    //---------------------------------------------------------------------\n    /** 2D float Perlin noise.\n     */\n    noise2(x: number, y: number) {\n        let ix0 = FASTFLOOR(x); // Integer part of x\n        let iy0 = FASTFLOOR(y); // Integer part of y\n        const fx0 = x - ix0;        // Fractional part of x\n        const fy0 = y - iy0;        // Fractional part of y\n        const fx1 = fx0 - 1.0;\n        const fy1 = fy0 - 1.0;\n        const ix1 = (ix0 + 1) & 0xff;  // Wrap to 0..255\n        const iy1 = (iy0 + 1) & 0xff;\n        ix0 = ix0 & 0xff;\n        iy0 = iy0 & 0xff;\n\n        const t = FADE(fy0);\n        const s = FADE(fx0);\n\n        let nx0 = this.grad2(this.perm[ix0 + this.perm[iy0]], fx0, fy0);\n        let nx1 = this.grad2(this.perm[ix0 + this.perm[iy1]], fx0, fy1);\n        const n0 = NLERP(t, nx0, nx1);\n\n        nx0 = this.grad2(this.perm[ix1 + this.perm[iy0]], fx1, fy0);\n        nx1 = this.grad2(this.perm[ix1 + this.perm[iy1]], fx1, fy1);\n        const n1 = NLERP(t, nx0, nx1);\n\n        return 0.507 * (NLERP(s, n0, n1));\n    }\n\n    //---------------------------------------------------------------------\n    /** 2D float Perlin periodic noise.\n     */\n    pnoise2(x: number, y: number, px: number, py: number) {\n        let ix0, iy0;\n        let nx0, nx1;\n\n        ix0 = FASTFLOOR(x); // Integer part of x\n        iy0 = FASTFLOOR(y); // Integer part of y\n        const fx0 = x - ix0;        // Fractional part of x\n        const fy0 = y - iy0;        // Fractional part of y\n        const fx1 = fx0 - 1.0;\n        const fy1 = fy0 - 1.0;\n        if (px < 1) px = 1;\n        if (py < 1) py = 1;\n        const ix1 = ((ix0 + 1) % px) & 0xff;  // Wrap to 0..px-1 and wrap to 0..255\n        const iy1 = ((iy0 + 1) % py) & 0xff;  // Wrap to 0..py-1 and wrap to 0..255\n        ix0 = (ix0 % px) & 0xff;\n        iy0 = (iy0 % py) & 0xff;\n\n        const t = FADE(fy0);\n        const s = FADE(fx0);\n\n        nx0 = this.grad2(this.perm[ix0 + this.perm[iy0]], fx0, fy0);\n        nx1 = this.grad2(this.perm[ix0 + this.perm[iy1]], fx0, fy1);\n        const n0 = NLERP(t, nx0, nx1);\n\n        nx0 = this.grad2(this.perm[ix1 + this.perm[iy0]], fx1, fy0);\n        nx1 = this.grad2(this.perm[ix1 + this.perm[iy1]], fx1, fy1);\n        const n1 = NLERP(t, nx0, nx1);\n\n        return 0.507 * (NLERP(s, n0, n1));\n    }\n\n\n    //---------------------------------------------------------------------\n    /** 3D float Perlin noise.\n     */\n    noise3(x: number, y: number, z: number) {\n        let ix0, iy0, iz0;\n        let nxy0, nxy1, nx0, nx1;\n\n        ix0 = FASTFLOOR(x); // Integer part of x\n        iy0 = FASTFLOOR(y); // Integer part of y\n        iz0 = FASTFLOOR(z); // Integer part of z\n        const fx0 = x - ix0;        // Fractional part of x\n        const fy0 = y - iy0;        // Fractional part of y\n        const fz0 = z - iz0;        // Fractional part of z\n        const fx1 = fx0 - 1.0;\n        const fy1 = fy0 - 1.0;\n        const fz1 = fz0 - 1.0;\n        const ix1 = (ix0 + 1) & 0xff; // Wrap to 0..255\n        const iy1 = (iy0 + 1) & 0xff;\n        const iz1 = (iz0 + 1) & 0xff;\n        ix0 = ix0 & 0xff;\n        iy0 = iy0 & 0xff;\n        iz0 = iz0 & 0xff;\n\n        const r = FADE(fz0);\n        const t = FADE(fy0);\n        const s = FADE(fx0);\n\n        nxy0 = this.grad3(this.perm[ix0 + this.perm[iy0 + this.perm[iz0]]], fx0, fy0, fz0);\n        nxy1 = this.grad3(this.perm[ix0 + this.perm[iy0 + this.perm[iz1]]], fx0, fy0, fz1);\n        nx0 = NLERP(r, nxy0, nxy1);\n\n        nxy0 = this.grad3(this.perm[ix0 + this.perm[iy1 + this.perm[iz0]]], fx0, fy1, fz0);\n        nxy1 = this.grad3(this.perm[ix0 + this.perm[iy1 + this.perm[iz1]]], fx0, fy1, fz1);\n        nx1 = NLERP(r, nxy0, nxy1);\n\n        const n0 = NLERP(t, nx0, nx1);\n\n        nxy0 = this.grad3(this.perm[ix1 + this.perm[iy0 + this.perm[iz0]]], fx1, fy0, fz0);\n        nxy1 = this.grad3(this.perm[ix1 + this.perm[iy0 + this.perm[iz1]]], fx1, fy0, fz1);\n        nx0 = NLERP(r, nxy0, nxy1);\n\n        nxy0 = this.grad3(this.perm[ix1 + this.perm[iy1 + this.perm[iz0]]], fx1, fy1, fz0);\n        nxy1 = this.grad3(this.perm[ix1 + this.perm[iy1 + this.perm[iz1]]], fx1, fy1, fz1);\n        nx1 = NLERP(r, nxy0, nxy1);\n\n        const n1 = NLERP(t, nx0, nx1);\n\n        return 0.936 * (NLERP(s, n0, n1));\n    }\n\n    //---------------------------------------------------------------------\n    /** 3D float Perlin periodic noise.\n     */\n    pnoise3(x: number, y: number, z: number, px: number, py: number, pz: number) {\n        let ix0, iy0, iz0;\n        let nxy0, nxy1, nx0, nx1;\n\n        ix0 = FASTFLOOR(x); // Integer part of x\n        iy0 = FASTFLOOR(y); // Integer part of y\n        iz0 = FASTFLOOR(z); // Integer part of z\n        const fx0 = x - ix0;        // Fractional part of x\n        const fy0 = y - iy0;        // Fractional part of y\n        const fz0 = z - iz0;        // Fractional part of z\n        const fx1 = fx0 - 1.0;\n        const fy1 = fy0 - 1.0;\n        const fz1 = fz0 - 1.0;\n        if (px < 1) px = 1;\n        if (py < 1) py = 1;\n        if (pz < 1) pz = 1;\n        const ix1 = ((ix0 + 1) % px) & 0xff; // Wrap to 0..px-1 and wrap to 0..255\n        const iy1 = ((iy0 + 1) % py) & 0xff; // Wrap to 0..py-1 and wrap to 0..255\n        const iz1 = ((iz0 + 1) % pz) & 0xff; // Wrap to 0..pz-1 and wrap to 0..255\n        ix0 = (ix0 % px) & 0xff;\n        iy0 = (iy0 % py) & 0xff;\n        iz0 = (iz0 % pz) & 0xff;\n\n        const r = FADE(fz0);\n        const t = FADE(fy0);\n        const s = FADE(fx0);\n\n        nxy0 = this.grad3(this.perm[ix0 + this.perm[iy0 + this.perm[iz0]]], fx0, fy0, fz0);\n        nxy1 = this.grad3(this.perm[ix0 + this.perm[iy0 + this.perm[iz1]]], fx0, fy0, fz1);\n        nx0 = NLERP(r, nxy0, nxy1);\n\n        nxy0 = this.grad3(this.perm[ix0 + this.perm[iy1 + this.perm[iz0]]], fx0, fy1, fz0);\n        nxy1 = this.grad3(this.perm[ix0 + this.perm[iy1 + this.perm[iz1]]], fx0, fy1, fz1);\n        nx1 = NLERP(r, nxy0, nxy1);\n\n        const n0 = NLERP(t, nx0, nx1);\n\n        nxy0 = this.grad3(this.perm[ix1 + this.perm[iy0 + this.perm[iz0]]], fx1, fy0, fz0);\n        nxy1 = this.grad3(this.perm[ix1 + this.perm[iy0 + this.perm[iz1]]], fx1, fy0, fz1);\n        nx0 = NLERP(r, nxy0, nxy1);\n\n        nxy0 = this.grad3(this.perm[ix1 + this.perm[iy1 + this.perm[iz0]]], fx1, fy1, fz0);\n        nxy1 = this.grad3(this.perm[ix1 + this.perm[iy1 + this.perm[iz1]]], fx1, fy1, fz1);\n        nx1 = NLERP(r, nxy0, nxy1);\n\n        const n1 = NLERP(t, nx0, nx1);\n\n        return 0.936 * (NLERP(s, n0, n1));\n    }\n\n\n    //---------------------------------------------------------------------\n    /** 4D float Perlin noise.\n     */\n\n    noise4(x: number, y: number, z: number, w: number) {\n        let ix0, iy0, iz0, iw0;\n        let nxyz0, nxyz1, nxy0, nxy1, nx0, nx1;\n\n        ix0 = FASTFLOOR(x); // Integer part of x\n        iy0 = FASTFLOOR(y); // Integer part of y\n        iz0 = FASTFLOOR(z); // Integer part of y\n        iw0 = FASTFLOOR(w); // Integer part of w\n        const fx0 = x - ix0;        // Fractional part of x\n        const fy0 = y - iy0;        // Fractional part of y\n        const fz0 = z - iz0;        // Fractional part of z\n        const fw0 = w - iw0;        // Fractional part of w\n        const fx1 = fx0 - 1.0;\n        const fy1 = fy0 - 1.0;\n        const fz1 = fz0 - 1.0;\n        const fw1 = fw0 - 1.0;\n        const ix1 = (ix0 + 1) & 0xff;  // Wrap to 0..255\n        const iy1 = (iy0 + 1) & 0xff;\n        const iz1 = (iz0 + 1) & 0xff;\n        const iw1 = (iw0 + 1) & 0xff;\n        ix0 = ix0 & 0xff;\n        iy0 = iy0 & 0xff;\n        iz0 = iz0 & 0xff;\n        iw0 = iw0 & 0xff;\n\n        const q = FADE(fw0);\n        const r = FADE(fz0);\n        const t = FADE(fy0);\n        const s = FADE(fx0);\n\n        nxyz0 = this.grad4(this.perm[ix0 + this.perm[iy0 + this.perm[iz0 + this.perm[iw0]]]], fx0, fy0, fz0, fw0);\n        nxyz1 = this.grad4(this.perm[ix0 + this.perm[iy0 + this.perm[iz0 + this.perm[iw1]]]], fx0, fy0, fz0, fw1);\n        nxy0 = NLERP(q, nxyz0, nxyz1);\n\n        nxyz0 = this.grad4(this.perm[ix0 + this.perm[iy0 + this.perm[iz1 + this.perm[iw0]]]], fx0, fy0, fz1, fw0);\n        nxyz1 = this.grad4(this.perm[ix0 + this.perm[iy0 + this.perm[iz1 + this.perm[iw1]]]], fx0, fy0, fz1, fw1);\n        nxy1 = NLERP(q, nxyz0, nxyz1);\n\n        nx0 = NLERP(r, nxy0, nxy1);\n\n        nxyz0 = this.grad4(this.perm[ix0 + this.perm[iy1 + this.perm[iz0 + this.perm[iw0]]]], fx0, fy1, fz0, fw0);\n        nxyz1 = this.grad4(this.perm[ix0 + this.perm[iy1 + this.perm[iz0 + this.perm[iw1]]]], fx0, fy1, fz0, fw1);\n        nxy0 = NLERP(q, nxyz0, nxyz1);\n\n        nxyz0 = this.grad4(this.perm[ix0 + this.perm[iy1 + this.perm[iz1 + this.perm[iw0]]]], fx0, fy1, fz1, fw0);\n        nxyz1 = this.grad4(this.perm[ix0 + this.perm[iy1 + this.perm[iz1 + this.perm[iw1]]]], fx0, fy1, fz1, fw1);\n        nxy1 = NLERP(q, nxyz0, nxyz1);\n\n        nx1 = NLERP(r, nxy0, nxy1);\n\n        const n0 = NLERP(t, nx0, nx1);\n\n        nxyz0 = this.grad4(this.perm[ix1 + this.perm[iy0 + this.perm[iz0 + this.perm[iw0]]]], fx1, fy0, fz0, fw0);\n        nxyz1 = this.grad4(this.perm[ix1 + this.perm[iy0 + this.perm[iz0 + this.perm[iw1]]]], fx1, fy0, fz0, fw1);\n        nxy0 = NLERP(q, nxyz0, nxyz1);\n\n        nxyz0 = this.grad4(this.perm[ix1 + this.perm[iy0 + this.perm[iz1 + this.perm[iw0]]]], fx1, fy0, fz1, fw0);\n        nxyz1 = this.grad4(this.perm[ix1 + this.perm[iy0 + this.perm[iz1 + this.perm[iw1]]]], fx1, fy0, fz1, fw1);\n        nxy1 = NLERP(q, nxyz0, nxyz1);\n\n        nx0 = NLERP(r, nxy0, nxy1);\n\n        nxyz0 = this.grad4(this.perm[ix1 + this.perm[iy1 + this.perm[iz0 + this.perm[iw0]]]], fx1, fy1, fz0, fw0);\n        nxyz1 = this.grad4(this.perm[ix1 + this.perm[iy1 + this.perm[iz0 + this.perm[iw1]]]], fx1, fy1, fz0, fw1);\n        nxy0 = NLERP(q, nxyz0, nxyz1);\n\n        nxyz0 = this.grad4(this.perm[ix1 + this.perm[iy1 + this.perm[iz1 + this.perm[iw0]]]], fx1, fy1, fz1, fw0);\n        nxyz1 = this.grad4(this.perm[ix1 + this.perm[iy1 + this.perm[iz1 + this.perm[iw1]]]], fx1, fy1, fz1, fw1);\n        nxy1 = NLERP(q, nxyz0, nxyz1);\n\n        nx1 = NLERP(r, nxy0, nxy1);\n\n        const n1 = NLERP(t, nx0, nx1);\n\n        return 0.87 * (NLERP(s, n0, n1));\n    }\n\n    //---------------------------------------------------------------------\n    /** 4D float Perlin periodic noise.\n     */\n\n    pnoise4(x: number, y: number, z: number, w: number, px: number, py: number, pz: number, pw: number) {\n        let ix0, iy0, iz0, iw0;\n        let nxyz0, nxyz1, nxy0, nxy1, nx0, nx1;\n\n        ix0 = FASTFLOOR(x); // Integer part of x\n        iy0 = FASTFLOOR(y); // Integer part of y\n        iz0 = FASTFLOOR(z); // Integer part of y\n        iw0 = FASTFLOOR(w); // Integer part of w\n        const fx0 = x - ix0;        // Fractional part of x\n        const fy0 = y - iy0;        // Fractional part of y\n        const fz0 = z - iz0;        // Fractional part of z\n        const fw0 = w - iw0;        // Fractional part of w\n        const fx1 = fx0 - 1.0;\n        const fy1 = fy0 - 1.0;\n        const fz1 = fz0 - 1.0;\n        const fw1 = fw0 - 1.0;\n        if (px < 1) px = 1;\n        if (py < 1) py = 1;\n        if (pz < 1) pz = 1;\n        if (pw < 1) pw = 1;\n        const ix1 = ((ix0 + 1) % px) & 0xff;  // Wrap to 0..px-1 and wrap to 0..255\n        const iy1 = ((iy0 + 1) % py) & 0xff;  // Wrap to 0..py-1 and wrap to 0..255\n        const iz1 = ((iz0 + 1) % pz) & 0xff;  // Wrap to 0..pz-1 and wrap to 0..255\n        const iw1 = ((iw0 + 1) % pw) & 0xff;  // Wrap to 0..pw-1 and wrap to 0..255\n        ix0 = (ix0 % px) & 0xff;\n        iy0 = (iy0 % py) & 0xff;\n        iz0 = (iz0 % pz) & 0xff;\n        iw0 = (iw0 % pw) & 0xff;\n\n        const q = FADE(fw0);\n        const r = FADE(fz0);\n        const t = FADE(fy0);\n        const s = FADE(fx0);\n\n        nxyz0 = this.grad4(this.perm[ix0 + this.perm[iy0 + this.perm[iz0 + this.perm[iw0]]]], fx0, fy0, fz0, fw0);\n        nxyz1 = this.grad4(this.perm[ix0 + this.perm[iy0 + this.perm[iz0 + this.perm[iw1]]]], fx0, fy0, fz0, fw1);\n        nxy0 = NLERP(q, nxyz0, nxyz1);\n\n        nxyz0 = this.grad4(this.perm[ix0 + this.perm[iy0 + this.perm[iz1 + this.perm[iw0]]]], fx0, fy0, fz1, fw0);\n        nxyz1 = this.grad4(this.perm[ix0 + this.perm[iy0 + this.perm[iz1 + this.perm[iw1]]]], fx0, fy0, fz1, fw1);\n        nxy1 = NLERP(q, nxyz0, nxyz1);\n\n        nx0 = NLERP(r, nxy0, nxy1);\n\n        nxyz0 = this.grad4(this.perm[ix0 + this.perm[iy1 + this.perm[iz0 + this.perm[iw0]]]], fx0, fy1, fz0, fw0);\n        nxyz1 = this.grad4(this.perm[ix0 + this.perm[iy1 + this.perm[iz0 + this.perm[iw1]]]], fx0, fy1, fz0, fw1);\n        nxy0 = NLERP(q, nxyz0, nxyz1);\n\n        nxyz0 = this.grad4(this.perm[ix0 + this.perm[iy1 + this.perm[iz1 + this.perm[iw0]]]], fx0, fy1, fz1, fw0);\n        nxyz1 = this.grad4(this.perm[ix0 + this.perm[iy1 + this.perm[iz1 + this.perm[iw1]]]], fx0, fy1, fz1, fw1);\n        nxy1 = NLERP(q, nxyz0, nxyz1);\n\n        nx1 = NLERP(r, nxy0, nxy1);\n\n        const n0 = NLERP(t, nx0, nx1);\n\n        nxyz0 = this.grad4(this.perm[ix1 + this.perm[iy0 + this.perm[iz0 + this.perm[iw0]]]], fx1, fy0, fz0, fw0);\n        nxyz1 = this.grad4(this.perm[ix1 + this.perm[iy0 + this.perm[iz0 + this.perm[iw1]]]], fx1, fy0, fz0, fw1);\n        nxy0 = NLERP(q, nxyz0, nxyz1);\n\n        nxyz0 = this.grad4(this.perm[ix1 + this.perm[iy0 + this.perm[iz1 + this.perm[iw0]]]], fx1, fy0, fz1, fw0);\n        nxyz1 = this.grad4(this.perm[ix1 + this.perm[iy0 + this.perm[iz1 + this.perm[iw1]]]], fx1, fy0, fz1, fw1);\n        nxy1 = NLERP(q, nxyz0, nxyz1);\n\n        nx0 = NLERP(r, nxy0, nxy1);\n\n        nxyz0 = this.grad4(this.perm[ix1 + this.perm[iy1 + this.perm[iz0 + this.perm[iw0]]]], fx1, fy1, fz0, fw0);\n        nxyz1 = this.grad4(this.perm[ix1 + this.perm[iy1 + this.perm[iz0 + this.perm[iw1]]]], fx1, fy1, fz0, fw1);\n        nxy0 = NLERP(q, nxyz0, nxyz1);\n\n        nxyz0 = this.grad4(this.perm[ix1 + this.perm[iy1 + this.perm[iz1 + this.perm[iw0]]]], fx1, fy1, fz1, fw0);\n        nxyz1 = this.grad4(this.perm[ix1 + this.perm[iy1 + this.perm[iz1 + this.perm[iw1]]]], fx1, fy1, fz1, fw1);\n        nxy1 = NLERP(q, nxyz0, nxyz1);\n\n        nx1 = NLERP(r, nxy0, nxy1);\n\n        const n1 = NLERP(t, nx0, nx1);\n\n        return 0.87 * (NLERP(s, n0, n1));\n    }\n}\n\n","import {Vector3} from \"@babylonjs/core/Maths/math.vector\";\n\nexport function checkUInt(val: number) {\n    if(Math.floor(val) != val) throw new Error(\"not an integer\");\n    if(val < 0) throw new Error(\"cannot be negative\");\n}\n\nexport function *range(width: number, plusMinus = true) {\n    checkUInt(width);\n    if(plusMinus) {\n        for(let i = -width; i <= width; i++)\n            yield i;\n    } else {\n        for(let i = 0; i <= width; i++)\n            yield i;\n    }\n}\n\nexport function checkDimensions(dimensions: number) {\n    if(dimensions < 0) throw new Error(\"dimensions cannot be negative\");\n    if(dimensions > 4) throw new Error(\"no support presently beyond 4 dimensions\");\n}\n\nexport function *scanDimensions3ToRef(width: number, vOut: Vector3) {\n    checkUInt(width);\n\n    const v = Vector3.Zero();\n    for(let x = 0; x <= width; x++)\n        for(let y = 0; y <= width; y++)\n            for(let z = 0; z <= width; z++) {\n                v.set(x, y, z);\n                yield v;\n            }\n}\n\nexport function *scanDimensions3D(width: number) {\n    checkUInt(width);\n\n    const v = Vector3.Zero();\n    for(let x = 0; x <= width; x++)\n        for(let y = 0; y <= width; y++)\n            for(let z = 0; z <= width; z++) {\n                v.set(x, y, z);\n                yield v;\n            }\n}\n\nexport function *scanXYZPlane(vCenter: Vector3, xWidth: number, yWidth: number, zWidth: number, plusMinus = false) {\n    const v = Vector3.Zero();\n    for(const x of range(xWidth, plusMinus)) {\n        for(const y of range(yWidth, false)) {\n            for(const z of range(zWidth, plusMinus)) {\n                v.set(vCenter.x + x, vCenter.y + y, vCenter.z + z);\n                yield v;\n            }\n        }\n    }\n}\n\nexport function *scanYCylinder(vCenter: Vector3, height: number, radius: number) {\n    const radius2 = radius * radius;\n    const zero = Vector3.Zero();\n    const vIter = Vector3.Zero();\n    for(const v of scanXYZPlane(zero, radius, height, radius)) {\n        vIter.copyFrom(v);\n        if(vIter.lengthSquared() <= radius2) {\n            vIter.addInPlace(vCenter);\n            yield vIter;\n        }\n    }\n}\n\nexport function *scanDimensions2D(width: number) {\n    checkUInt(width);\n\n    const v = Vector3.Zero();\n    for(let x = 0; x <= width; x++)\n        for(let y = 0; y <= width; y++) {\n                v.set(x, y, 0);\n                yield v;\n            }\n}\n\nexport function *scanUnitCircle3D(slices: number, vOut: Vector3) {\n    checkUInt(slices);\n\n    const scale = 1.0 / slices;\n    for(let i = 0; i < slices; i++) {\n        const scaledStep = i * scale;\n        const scaledAngle = (2 * Math.PI) * scaledStep;\n        vOut.x = Math.cos(scaledAngle);\n        vOut.y = Math.sin(scaledAngle);\n        vOut.z = 0;\n        yield vOut;\n    }\n}\n\nexport function checkLimit(val: number, width: number) {\n    if(val > width) throw new Error(\"limit exceeded\");\n    if(val < 0) throw new Error(\"limit underflowed\");\n}\n\nexport function checkLimit3(v: Vector3, width: number) {\n    checkLimit(v.x, width);\n    checkLimit(v.y, width);\n    checkLimit(v.z, width);\n}\n","import {combineHashes, Equatable, rawHash} from \"@esfx/equatable\";\nimport {StructType, uint8} from \"@esfx/struct-type\";\nimport {Vector3} from \"@babylonjs/core/Maths/math.vector\";\n\nexport class point3 extends StructType([\n    {name: \"x\", type: uint8},\n    {name: \"y\", type: uint8},\n    {name: \"z\", type: uint8},\n]) {\n    [Equatable.equals](other: unknown) {\n        return other instanceof point3\n            && this.x === other.x\n            && this.y === other.y\n            && this.z === other.z;\n    }\n\n    [Equatable.hash]() {\n        let hc = 0;\n        hc = combineHashes(hc, rawHash(this.x));\n        hc = combineHashes(hc, rawHash(this.y));\n        hc = combineHashes(hc, rawHash(this.z));\n        return hc;\n    }\n    public copyToVector3(v: Vector3) {\n        v.x = this.x;\n        v.y = this.y;\n        v.z = this.z;\n    }\n    public copyFromVector3(v: Vector3) {\n        this.x = v.x;\n        this.y = v.y;\n        this.z = v.z;\n    }\n    public toIndex(width: number) {\n        if(Math.floor(width) != width) throw new Error(\"must be integer\");\n        return (this.z * width * width) + (this.y * width) + (this.x);\n    }\n    public static fromVector3(v: Vector3) {\n        const point = new point3();\n        point.copyFromVector3(v);\n        return point;\n    }\n}","import {Vector3} from \"@babylonjs/core/Maths/math.vector\";\n\nexport const neighborsCheck3 = [\n    new Vector3(-1, 0, 0), new Vector3(1, 0, 0),\n    new Vector3(0, -1, 0), new Vector3(0, 1, 0),\n    new Vector3(0, 0, -1), new Vector3(0, 0, 1)\n];\n\nexport const neighborsCheck2 = [\n    new Vector3(-1, 0, 0), new Vector3(1, 0, 0),\n    new Vector3(0, -1, 0), new Vector3(0, 1, 0),\n];\n","import {Vector3} from \"@babylonjs/core/Maths/math.vector\";\nimport {scanDimensions3D} from \"../iterators/dimensional\";\nimport {point3} from \"../structs/point3\";\nimport {Matrix} from \"@babylonjs/core\";\nimport {neighborsCheck3} from \"../iterators/neighbors\";\n\nexport class voxels_cube {\n    private readonly _voxels: Uint8Array;\n    public readonly vBaseCorner = Vector3.Zero();\n    public static readonly width = 32;\n    public static readonly widthScale = 1.0 / voxels_cube.width;\n    public constructor(vUpperLevel: Vector3) {\n        this.vBaseCorner = vUpperLevel.scale(voxels_cube.width);\n        const width = voxels_cube.width;\n        this._voxels = new Uint8Array(width * width * width)\n    }\n    public get size() {\n        let count = 0;\n        for(const voxel of this._voxels) {\n            if(voxel == 1) count++;\n        }\n        return count;\n    }\n    private world_to_cube(vWorld: Vector3): {pt: point3, status: boolean} {\n        const vCube = Vector3.Zero();\n        vCube.copyFrom(vWorld);\n        vCube.subtract(this.vBaseCorner);\n        const pt = point3.fromVector3(vCube);\n        const bytes = new Uint8Array(pt.buffer);\n        let status = true;\n        for(const val of bytes) {\n            if(val < 0) status = false;\n            if(val >= voxels_cube.width) status = false;\n        }\n        return {\n            pt,\n            status\n        };\n    }\n    public setVoxel(vWorld: Vector3, val: boolean) {\n        const vCube = this.world_to_cube(vWorld);\n        if(vCube.status)\n            this._voxels[vCube.pt.toIndex(voxels_cube.width)] = val ? 1 : 0;\n    }\n    public getVoxel(vWorld: Vector3): boolean {\n        const vCube = this.world_to_cube(vWorld);\n        return vCube.status ?\n            (this._voxels[vCube.pt.toIndex(voxels_cube.width)] == 1) :\n            false;\n    }\n    public *iterate_set_world_voxels(): Generator<Vector3> {\n        for(const v of this.scan_world_cube_voxels()) {\n            if(this.getVoxel(v))\n                yield v;\n        }\n    }\n    public *scan_world_cube_voxels(): Generator<Vector3> {\n        const v = Vector3.Zero();\n        for(const v2 of scanDimensions3D(voxels_cube.width)) {\n            v.copyFrom(v2);\n            v.add(this.vBaseCorner);\n            yield v;\n        }\n    }\n    public is_boundary_voxel(vWorld: Vector3) {\n        const v = Vector3.Zero();\n        let count = 0;\n        for(const neighbor of neighborsCheck3) {\n            v.copyFrom(vWorld);\n            v.addInPlace(neighbor);\n            if(this.getVoxel(v)) count++;\n        }\n        return count != 6;\n    }\n    public extract_boundary_world_voxels() {\n        const arr = new Array<Vector3>();\n        for(const vWorld of this.iterate_set_world_voxels()) {\n            if(this.is_boundary_voxel(vWorld))\n                arr.push(vWorld.clone());\n        }\n        this._voxels.fill(0);\n        for(const v of arr)\n            this.setVoxel(v, true);\n    }\n    public get_translations() {\n        const buffer = new Float32Array(this._voxels.length * Matrix.length);\n        const m = new Matrix();\n        let i = 0;\n        for(const v of this.iterate_set_world_voxels()) {\n            m.setTranslation(v);\n            m.copyToArray(buffer, i * 16);\n            i++;\n        }\n        return buffer;\n    }\n}\n","import {Vector3} from \"@babylonjs/core/Maths/math.vector\";\n\nexport interface ISampler {\n    sample(v: Vector3): number;\n}\n\nfunction rotateToRef(v: Vector3, ref: Vector3) {\n    ref.y = v.x;\n    ref.z = v.y;\n    ref.x = v.z;\n}\n\nexport class bump {\n    private readonly sampler: ISampler;\n    private readonly scaleNoise: number;\n    private readonly tangentSpaceEpsilon: number;\n    constructor(props: {sampler: ISampler, scaleNoise: number, tangentSpaceEpsilon: number}) {\n        if(props.scaleNoise <= 0) throw new Error(\"scaleNoise, bad value\");\n        if(props.tangentSpaceEpsilon <= 0 || props.tangentSpaceEpsilon > 1) throw new Error(\"tangentSpaceEpsilon, bad value\");\n        //\n        this.sampler = props.sampler;\n        this.scaleNoise = props.scaleNoise;\n        this.tangentSpaceEpsilon = props.tangentSpaceEpsilon;\n    }\n    private readonly position00 = Vector3.Zero();\n    private readonly position10 = Vector3.Zero();\n    private readonly position01 = Vector3.Zero();\n    private readonly position00Scaled = Vector3.Zero();\n    private readonly position10Scaled = Vector3.Zero();\n    private readonly position01Scaled = Vector3.Zero();\n    private readonly normal = Vector3.Zero();\n    private readonly position00WithOffset = Vector3.Zero();\n    private readonly position10WithOffset = Vector3.Zero();\n    private readonly position01WithOffset = Vector3.Zero();\n    private readonly tangent10 = Vector3.Zero();\n    private readonly tangent01 = Vector3.Zero();\n    private readonly bump = Vector3.Zero();\n    public bumpToRef(position: Vector3, normal: Vector3, refBump: Vector3) {\n        if(Math.abs(normal.lengthSquared() - 1.0) > 0.01) throw new Error(\"bad normal\");\n        //\n        this.normal.copyFrom(normal);\n        //\n        this.position00.copyFrom(position);\n        //\n        rotateToRef(normal, this.position10);\n        rotateToRef(this.position10, this.position01);\n        //\n        this.position10.scaleInPlace(this.tangentSpaceEpsilon);\n        this.position10.addInPlace(position);\n        //\n        this.position01.scaleInPlace(this.tangentSpaceEpsilon);\n        this.position01.addInPlace(position);\n        //\n        this.position00Scaled.copyFrom(this.position00); this.position00Scaled.scaleInPlace(this.scaleNoise);\n        this.position10Scaled.copyFrom(this.position10); this.position10Scaled.scaleInPlace(this.scaleNoise);\n        this.position01Scaled.copyFrom(this.position01); this.position01Scaled.scaleInPlace(this.scaleNoise);\n        //\n        this.offsetPositionsByNoise();\n        //\n        refBump.copyFrom(this.bump);\n    }\n    private offsetPositionsByNoise() {\n        //\n        this.position00WithOffset.copyFrom(this.normal);\n        this.position00WithOffset.scaleInPlace(this.sampler.sample(this.position00Scaled));\n        this.position00WithOffset.addInPlace(this.position00);\n        //\n        this.position10WithOffset.copyFrom(this.normal);\n        this.position10WithOffset.scaleInPlace(this.sampler.sample(this.position10Scaled));\n        this.position10WithOffset.addInPlace(this.position10);\n        //\n        this.position01WithOffset.copyFrom(this.normal);\n        this.position01WithOffset.scaleInPlace(this.sampler.sample(this.position01Scaled));\n        this.position01WithOffset.addInPlace(this.position01);\n        //\n        this.tangent10.copyFrom(this.position10WithOffset)\n        this.tangent10.subtractInPlace(this.position00WithOffset);\n        this.tangent10.normalize();\n        //\n        this.tangent01.copyFrom(this.position01WithOffset)\n        this.tangent01.subtractInPlace(this.position00WithOffset);\n        this.tangent01.normalize();\n        //\n        Vector3.CrossToRef(this.tangent10, this.tangent01, this.bump);\n        this.bump.normalize();\n    }\n}\n","import {scanDimensions2D} from \"../../iterators/dimensional\";\nimport {CqNoise} from \"../../noise/cqnoise\";\nimport {DynamicTexture} from \"@babylonjs/core\";\nimport {Scene} from \"@babylonjs/core/scene\";\nimport {Vector3} from \"@babylonjs/core/Maths/math.vector\";\nimport {bump} from \"../../noise/bump\";\n\nexport class ridges_textures {\n    static generate(vOffset: Vector3, width: number, scene: Scene): DynamicTexture {\n        const noise = new CqNoise();\n        const bump_ = new bump({\n            scaleNoise: 0.1,\n            tangentSpaceEpsilon: 0.001,\n            sampler: {\n                sample(v: Vector3): number {\n                    return noise.noise2(v.x, v.y);\n                }\n            },\n        });\n        \n        const buffer = new Uint8ClampedArray(width * width * 4);\n        const scale = 0.1;\n        const normal = new Vector3(0, 0, 1);\n        const bumpOut = Vector3.Zero();\n        const half = Vector3.One().scale(0.5);\n        for (const v of scanDimensions2D(width)) {\n            const v2 = v.add(vOffset);\n            bump_.bumpToRef(v2, normal, bumpOut);\n            bumpOut.scaleInPlace(0.5);\n            bumpOut.addInPlace(half);\n            bumpOut.scaleInPlace(255);\n\n            const index = v.y * width + v.x;\n            const offset = index * 4;\n            buffer[offset + 0] = bumpOut.x;\n            buffer[offset + 1] = bumpOut.y;\n            buffer[offset + 2] = bumpOut.z;\n            buffer[offset + 3] = 255;\n        }\n\n        const dynamicTexture = new DynamicTexture(\"test\", width, scene, true);\n        const context = dynamicTexture.getContext();\n        const imageData = context.getImageData(0, 0, width, width);\n        for (let i = 0; i < imageData.data.length; i++) imageData.data[i] = buffer[i];\n        context.putImageData(imageData, 0, 0);\n        dynamicTexture.update(false, true, true);\n        return dynamicTexture;\n    }\n}\n","import {CreateSceneClass} from \"../../createScene\";\nimport {Engine} from \"@babylonjs/core/Engines/engine\";\nimport {Scene} from \"@babylonjs/core/scene\";\nimport {ArcRotateCamera} from \"@babylonjs/core/Cameras/arcRotateCamera\";\nimport {Vector3} from \"@babylonjs/core/Maths/math.vector\";\nimport {DirectionalLight} from \"@babylonjs/core/Lights/directionalLight\";\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nimport Recast from \"recast-detour\"\nimport {\n    Color3, Deferred,\n    IAgentParameters,\n    Matrix,\n    Mesh,\n    MeshBuilder,\n    Nullable, PointLight,\n    Quaternion,\n    RecastJSPlugin, TargetCamera,\n    TransformNode\n} from \"@babylonjs/core\";\nimport {CqNoise} from \"../../noise/cqnoise\";\nimport {voxels_cube} from \"../../voxels/voxels_cube\";\nimport {StandardMaterial} from \"@babylonjs/core/Materials/standardMaterial\";\nimport {ridges_textures} from \"../../textures/bump/ridges_texture\";\nimport {RecastJSCrowd} from \"@babylonjs/core/Navigation/Plugins/recastJSPlugin\";\nimport {delay} from \"@esfx/async-delay\";\n\nexport class VoxelCubeMazeWithBumpMap implements CreateSceneClass {\n    private scene: Nullable<Scene> = null;\n    private camera: Nullable<ArcRotateCamera> = null;\n    private canvas: Nullable<HTMLCanvasElement> = null;\n    private navigationPlugin: Nullable<RecastJSPlugin> = null;\n    private agentLight: Nullable<PointLight> = null;\n    private readonly vCube = Vector3.Zero();\n    \n    createScene = async (\n        engine: Engine,\n        canvas: HTMLCanvasElement\n    ): Promise<Scene> => {\n        // load it\n        await Recast();\n        \n        // This creates a basic Babylon Scene object (non-mesh)\n        this.scene = new Scene(engine);\n        this.canvas = canvas;\n\n        // This creates and positions a free camera (non-mesh)\n        this.camera = new ArcRotateCamera(\n            \"my first camera\",\n            0,\n            Math.PI / 3,\n            10,\n            new Vector3(0, 0, 0),\n            this.scene\n        );\n        const camera = this.camera;\n        function constrainCamera() {\n            camera.lowerRadiusLimit = 0.5;\n            camera.upperRadiusLimit = 0.51;\n            camera.minZ = 0.01;\n            camera.lowerBetaLimit = Math.PI / 4;\n            camera.upperBetaLimit = 3 * Math.PI / 4;\n        }\n        constrainCamera();\n\n        // This attaches the camera to the canvas\n        this.camera.attachControl(canvas, true);\n\n        const moonLight = new DirectionalLight(\n            \"moonLight\",\n            new Vector3(0, -1, 1),\n            this.scene\n        );\n        moonLight.intensity = 0.5;\n        moonLight.position.y = 10;\n\n        this.agentLight = new PointLight(\"agentLight\", Vector3.Zero(), this.scene);\n        this.agentLight.intensity = 0.3;\n        \n        await this.perlinBlock(Vector3.Zero());\n        this.runAgents().then(() => {\n            console.log(`runAgents.exit`);\n        })\n\n        return this.scene;\n    };\n    private rocks: Nullable<Mesh> = null;\n    async perlinBlock(vCube: Vector3) {\n        this.vCube.copyFrom(vCube);\n        this.rocks = MeshBuilder.CreatePolyhedron(\"rocks\", {size: 1, type: 2}, this.scene);\n        const scale = 0.2, noiseCutoff = 0.15;\n        const noise = new CqNoise(), cube = new voxels_cube(vCube);\n\n        const ground = MeshBuilder.CreateGround(\"ground\", {\n            width: voxels_cube.width,\n            height: voxels_cube.width,\n            updatable: true,\n        }, this.scene!);\n        \n        {\n            const position = vCube.clone();\n            const h = voxels_cube.width / 2;\n            position.addInPlace(new Vector3(h, h, h));\n            ground.position = position;\n            const material = new StandardMaterial(\"ground.material\", this.scene!);\n            material.backFaceCulling = false;\n            const texture = ridges_textures.generate(cube.vBaseCorner, 2048, this.scene!);\n            material.bumpTexture = texture;\n            material.diffuseColor = Color3.Gray();\n            ground.material = material;\n        }\n\n        for (const v of cube.scan_world_cube_voxels()) {\n            const v2 = v.clone();\n            const vTerrain = v2.scale(0.1);\n            const fieldTerrain = noise.noise2(vTerrain.x, vTerrain.z);\n\n            if ((Math.abs(fieldTerrain) > noiseCutoff) && (v2.y >= voxels_cube.width / 2)) {\n                cube.setVoxel(v, true);\n            }\n        }\n        console.log(\"scan_world_cube_voxels.2\");\n\n        const rocks = this.rocks;\n        function doMesh() {\n            const matricesData = new Float32Array(16 * cube.size);\n            const colorData = new Float32Array(4 * cube.size);\n\n            let index = 0;\n            for (const v of cube.iterate_set_world_voxels()) {\n                const vScale = v.scale(scale);\n\n                const roll = noise.noise3(vScale.y, vScale.z, vScale.x);\n                const pitch = noise.noise3(vScale.z, vScale.x, vScale.x);\n                const yaw = noise.noise3(vScale.x, vScale.y, vScale.z);\n                const m2 = Matrix.Compose(Vector3.One(), Quaternion.FromEulerAngles(roll, pitch, yaw), v);\n\n                const v2 = v.clone();\n                m2.copyToArray(matricesData, index * 16);\n\n                const shade = (noise.noise3(vScale.x, vScale.y, vScale.z) + 1) / 2;\n                colorData[index * 4 + 0] = shade;\n                colorData[index * 4 + 1] = shade;\n                colorData[index * 4 + 2] = shade;\n                colorData[index * 4 + 3] = 1.0;\n\n                index++;\n            }\n            console.log(\"iterate_set_world_voxels\");\n\n            rocks.thinInstanceSetBuffer(\"matrix\", matricesData, 16);\n            rocks.thinInstanceSetBuffer(\"color\", colorData, 4);\n\n            rocks.material = new StandardMaterial(\"material\");\n        }\n        console.log(`cube.size.1: ${cube.size}`);\n        doMesh();\n\n        this.navigationPlugin = new RecastJSPlugin();\n        const parameters = {\n            cs: 0.2,\n            ch: 0.2,\n            walkableSlopeAngle: 35,\n            walkableHeight: 1,\n            walkableClimb: 1,\n            walkableRadius: 2,\n            maxEdgeLen: 12,\n            maxSimplificationError: 1.3,\n            minRegionArea: 8,\n            mergeRegionArea: 20,\n            maxVertsPerPoly: 6,\n            detailSampleDist: 6,\n            detailSampleMaxError: 1,\n        };\n        this.navigationPlugin.createNavMesh([rocks, ground], parameters);\n        \n        const navigationPlugin = this.navigationPlugin;\n        const scene = this.scene;\n        function debugMesh() {\n            const navmeshdebug = navigationPlugin.createDebugNavMesh(scene!);\n            const matdebug = new StandardMaterial(\"matdebug\", scene!);\n            matdebug.diffuseColor = new Color3(0.1, 0.2, 1);\n            matdebug.alpha = 0.2;\n            navmeshdebug.material = matdebug;\n        }\n        //debugMesh();\n\n        cube.extract_boundary_world_voxels();\n        doMesh();\n\n        console.log(`cube.size.2: ${cube.size}`);\n\n    }\n    private agentMesh: Nullable<Mesh> = null;\n    async runAgents() {\n        const agentParams = {\n            radius: 2,\n            height: 2,\n            maxAcceleration: 4.0,\n            maxSpeed: 1.0,\n            collisionQueryRange: 2,\n            pathOptimizationRange: 0.0,\n            separationWeight: 1.0} as IAgentParameters;\n\n        this.agentMesh = MeshBuilder.CreateSphere(\"agent\", {diameter: .02, updatable: true}, this.scene);\n        this.agentMesh.position = new Vector3(0,1,0);\n        const material = new StandardMaterial(\"ground.material\", this.scene!);\n        this.agentMesh.material = material;\n        material.diffuseColor = Color3.Green();\n        material.alpha = 0.3;\n        const crowd = this.navigationPlugin!.createCrowd(5, 5, this.scene!);\n        \n        const startAt = this.vCube.clone();\n        const h = voxels_cube.width / 2;\n        startAt.addInPlace(new Vector3(h, h, h));\n        const firstPosition = this.navigationPlugin!.getClosestPoint(startAt);\n        const moveDirection = new Vector3(0, 0, voxels_cube.width);\n        \n        const transformNode = new TransformNode(\"transform\");\n        const agentIndex = crowd.addAgent(firstPosition, agentParams, transformNode);\n        this.agentMesh.parent = transformNode;\n        this.agentLight!.parent = transformNode;\n        \n        this.camera!.targetHost = this.agentMesh;\n        crowd.agentGoto(agentIndex, firstPosition);\n        \n        const crowdCallbacks = crowd as RecastJSCrowd;\n        async function agentReachedTarget(agentIndex: number) {\n            const deferred = new Deferred<boolean>();\n            crowdCallbacks.onReachTargetObservable.add(eventData => {\n                if(eventData.agentIndex == agentIndex) {\n                    console.log(`agent arrived: ${eventData.agentIndex}, ${eventData.destination}`);\n                    deferred.resolve(true);\n                }\n            });\n            return await deferred.promise;\n        }\n\n        for(;;) {\n            await agentReachedTarget(agentIndex);\n            const destination = this.navigationPlugin!.getRandomPointAround(transformNode.position, voxels_cube.width * 10);\n            const goto = this.navigationPlugin!.moveAlong(transformNode.position, destination);\n            console.log(`moveAlong: ${goto.toString()}`);\n            crowd.agentGoto(agentIndex, goto);\n            console.log(`agent goto: ${firstPosition.toString()}`);\n        }\n\n    }\n}\n\nexport default new VoxelCubeMazeWithBumpMap();\n"],"names":["FADE","t","FASTFLOOR","x","Math","floor","NLERP","a","b","CqNoise","perm","grad1","hash","h","grad","grad2","y","u","v","grad3","z","grad4","w","noise1","ix0","fx0","fx1","ix1","this","pnoise1","px","noise2","iy0","fy0","fy1","iy1","s","nx0","nx1","n0","n1","pnoise2","py","noise3","iz0","nxy0","nxy1","fz0","fz1","iz1","r","pnoise3","pz","noise4","iw0","nxyz0","nxyz1","fw0","fw1","iw1","q","pnoise4","pw","checkUInt","val","Error","point3","name","type","other","hc","copyToVector3","copyFromVector3","toIndex","width","static","point","neighborsCheck3","voxels_cube","vUpperLevel","vBaseCorner","scale","_voxels","Uint8Array","size","count","voxel","world_to_cube","vWorld","vCube","copyFrom","subtract","pt","fromVector3","bytes","buffer","status","setVoxel","getVoxel","scan_world_cube_voxels","v2","set","scanDimensions3D","add","is_boundary_voxel","neighbor","addInPlace","extract_boundary_world_voxels","arr","Array","iterate_set_world_voxels","push","clone","fill","get_translations","Float32Array","length","m","i","setTranslation","copyToArray","widthScale","rotateToRef","ref","bump","constructor","props","position00","position10","position01","position00Scaled","position10Scaled","position01Scaled","normal","position00WithOffset","position10WithOffset","position01WithOffset","tangent10","tangent01","scaleNoise","tangentSpaceEpsilon","sampler","bumpToRef","position","refBump","abs","lengthSquared","scaleInPlace","offsetPositionsByNoise","sample","subtractInPlace","normalize","ridges_textures","vOffset","scene","noise","bump_","Uint8ClampedArray","bumpOut","half","scanDimensions2D","offset","dynamicTexture","context","getContext","imageData","getImageData","data","putImageData","update","VoxelCubeMazeWithBumpMap","camera","canvas","navigationPlugin","agentLight","createScene","async","engine","PI","lowerRadiusLimit","upperRadiusLimit","minZ","lowerBetaLimit","upperBetaLimit","attachControl","moonLight","intensity","perlinBlock","runAgents","then","console","log","rocks","agentMesh","cube","ground","height","updatable","material","backFaceCulling","texture","generate","bumpTexture","diffuseColor","vTerrain","fieldTerrain","doMesh","matricesData","colorData","index","vScale","roll","pitch","yaw","m2","shade","thinInstanceSetBuffer","createNavMesh","cs","ch","walkableSlopeAngle","walkableHeight","walkableClimb","walkableRadius","maxEdgeLen","maxSimplificationError","minRegionArea","mergeRegionArea","maxVertsPerPoly","detailSampleDist","detailSampleMaxError","diameter","alpha","crowd","createCrowd","startAt","firstPosition","getClosestPoint","transformNode","agentIndex","addAgent","radius","maxAcceleration","maxSpeed","collisionQueryRange","pathOptimizationRange","separationWeight","parent","targetHost","agentGoto","crowdCallbacks","agentReachedTarget","deferred","onReachTargetObservable","eventData","destination","resolve","promise","getRandomPointAround","goto","moveAlong","toString"],"sourceRoot":""}